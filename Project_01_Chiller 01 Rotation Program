/* Auto-generated ProgramImpl Code */

import java.util.*;              /* java Predefined*/
import javax.baja.nre.util.*;    /* nre Predefined*/
import javax.baja.sys.*;         /* baja Predefined*/
import javax.baja.status.*;      /* baja Predefined*/
import javax.baja.util.*;        /* baja Predefined*/
import com.tridium.program.*;    /* program-rt Predefined*/

public class ProgramImpl
  extends com.tridium.program.ProgramBase
{

////////////////////////////////////////////////////////////////
// Getters
////////////////////////////////////////////////////////////////

  public BNameMap getDisplayNames() { return (BNameMap)get("displayNames"); }
  public BStatusNumeric getSEQ_IN() { return (BStatusNumeric)get("SEQ_IN"); }
  public BStatusNumeric getLEAD_OUT() { return (BStatusNumeric)get("LEAD_OUT"); }
  public BStatusNumeric getLAG1_OUT() { return (BStatusNumeric)get("LAG1_OUT"); }
  public BStatusNumeric getLAG2_OUT() { return (BStatusNumeric)get("LAG2_OUT"); }
  public BStatusNumeric getLAG3_OUT() { return (BStatusNumeric)get("LAG3_OUT"); }
  public BStatusNumeric getLAG4_OUT() { return (BStatusNumeric)get("LAG4_OUT"); }
  public BStatusNumeric getLAG5_OUT() { return (BStatusNumeric)get("LAG5_OUT"); }
  public BStatusNumeric getLAG6_OUT() { return (BStatusNumeric)get("LAG6_OUT"); }
  public BStatusNumeric getCH1_RUN_HOURS() { return (BStatusNumeric)get("CH1_RUN_HOURS"); }
  public BStatusNumeric getCH2_RUN_HOURS() { return (BStatusNumeric)get("CH2_RUN_HOURS"); }
  public BStatusNumeric getCH3_RUN_HOURS() { return (BStatusNumeric)get("CH3_RUN_HOURS"); }
  public BStatusNumeric getCH4_RUN_HOURS() { return (BStatusNumeric)get("CH4_RUN_HOURS"); }
  public BStatusNumeric getCH5_RUN_HOURS() { return (BStatusNumeric)get("CH5_RUN_HOURS"); }
  public BStatusNumeric getCH6_RUN_HOURS() { return (BStatusNumeric)get("CH6_RUN_HOURS"); }
  public BStatusNumeric getCH7_RUN_HOURS() { return (BStatusNumeric)get("CH7_RUN_HOURS"); }
  public BStatusBoolean getEN_RUN_HOUR() { return (BStatusBoolean)get("EN_RUN_HOUR"); }

////////////////////////////////////////////////////////////////
// Setters
////////////////////////////////////////////////////////////////

  public void setDisplayNames(javax.baja.util.BNameMap v) { set("displayNames", v); }
  public void setSEQ_IN(javax.baja.status.BStatusNumeric v) { set("SEQ_IN", v); }
  public void setLEAD_OUT(javax.baja.status.BStatusNumeric v) { set("LEAD_OUT", v); }
  public void setLAG1_OUT(javax.baja.status.BStatusNumeric v) { set("LAG1_OUT", v); }
  public void setLAG2_OUT(javax.baja.status.BStatusNumeric v) { set("LAG2_OUT", v); }
  public void setLAG3_OUT(javax.baja.status.BStatusNumeric v) { set("LAG3_OUT", v); }
  public void setLAG4_OUT(javax.baja.status.BStatusNumeric v) { set("LAG4_OUT", v); }
  public void setLAG5_OUT(javax.baja.status.BStatusNumeric v) { set("LAG5_OUT", v); }
  public void setLAG6_OUT(javax.baja.status.BStatusNumeric v) { set("LAG6_OUT", v); }
  public void setCH1_RUN_HOURS(javax.baja.status.BStatusNumeric v) { set("CH1_RUN_HOURS", v); }
  public void setCH2_RUN_HOURS(javax.baja.status.BStatusNumeric v) { set("CH2_RUN_HOURS", v); }
  public void setCH3_RUN_HOURS(javax.baja.status.BStatusNumeric v) { set("CH3_RUN_HOURS", v); }
  public void setCH4_RUN_HOURS(javax.baja.status.BStatusNumeric v) { set("CH4_RUN_HOURS", v); }
  public void setCH5_RUN_HOURS(javax.baja.status.BStatusNumeric v) { set("CH5_RUN_HOURS", v); }
  public void setCH6_RUN_HOURS(javax.baja.status.BStatusNumeric v) { set("CH6_RUN_HOURS", v); }
  public void setCH7_RUN_HOURS(javax.baja.status.BStatusNumeric v) { set("CH7_RUN_HOURS", v); }
  public void setEN_RUN_HOUR(javax.baja.status.BStatusBoolean v) { set("EN_RUN_HOUR", v); }

////////////////////////////////////////////////////////////////
// Program Source
////////////////////////////////////////////////////////////////

  public void onStart() throws Exception
  {
    // start up code here
  }
  
  public void onExecute() throws Exception
  {
  ///////////////////////////////////////////////*Defing Inputs and Outputs*///////////////////////////// 
    BStatusNumeric SEQ_IN = getSEQ_IN();
    BStatusBoolean EN_RUN_HOUR = getEN_RUN_HOUR();
    BStatusNumeric CH1_RUN_HOURS = getCH1_RUN_HOURS();
    BStatusNumeric CH2_RUN_HOURS = getCH2_RUN_HOURS();
    BStatusNumeric CH3_RUN_HOURS = getCH3_RUN_HOURS();
    BStatusNumeric CH4_RUN_HOURS = getCH4_RUN_HOURS();
    BStatusNumeric CH5_RUN_HOURS = getCH5_RUN_HOURS();
    BStatusNumeric CH6_RUN_HOURS = getCH6_RUN_HOURS();
    BStatusNumeric CH7_RUN_HOURS = getCH7_RUN_HOURS();
    BStatusNumeric LEAD_OUT = getLEAD_OUT();
    BStatusNumeric LAG1_OUT = getLAG1_OUT();
    BStatusNumeric LAG2_OUT = getLAG2_OUT();
    BStatusNumeric LAG3_OUT = getLAG3_OUT();
    BStatusNumeric LAG4_OUT = getLAG4_OUT();
    BStatusNumeric LAG5_OUT = getLAG5_OUT();
    BStatusNumeric LAG6_OUT = getLAG6_OUT();
  ///////////////////////////////////////////////**Defing Inputs and Outputs**///////////////////////////// 
  //////////////////////////////////////////////*If rotation not based on Run Hours*////////////////////////
    if (EN_RUN_HOUR.getValue()==false)
        {
          if (SEQ_IN.getValue()==0)
            {
              LEAD_OUT.setValue( 1 );
              LAG1_OUT.setValue( 2 );
              LAG2_OUT.setValue( 3 );
              LAG3_OUT.setValue( 4 );
              LAG4_OUT.setValue( 5 );
              LAG5_OUT.setValue( 6 );
              LAG6_OUT.setValue( 7 );
            } 
          if (SEQ_IN.getValue()==1)
            {
              LEAD_OUT.setValue( 3 );
              LAG1_OUT.setValue( 1 );
              LAG2_OUT.setValue( 2 );
              LAG3_OUT.setValue( 7 );
              LAG4_OUT.setValue( 4 );
              LAG5_OUT.setValue( 5 );
              LAG6_OUT.setValue( 6 );
            } 
          if (SEQ_IN.getValue()==2)
            {
              LEAD_OUT.setValue( 2 );
              LAG1_OUT.setValue( 3 );
              LAG2_OUT.setValue( 1 );
              LAG3_OUT.setValue( 6 );
              LAG4_OUT.setValue( 7 );
              LAG5_OUT.setValue( 4 );
              LAG6_OUT.setValue( 5 );
            }
          }
  //////////////////////////////////////////////**If rotation not based on Run Hours**////////////////////////
  //////////////////////////////////////////////*If rotation based on Run Hours*/////////////////////////////   
     if (EN_RUN_HOUR.getValue()==true)
          { 
          //////////////////////////////////////////////Raw Run Hours///////////////////////////
            double CH1=CH1_RUN_HOURS.getValue();
            double CH2=CH2_RUN_HOURS.getValue();
            double CH3=CH3_RUN_HOURS.getValue();
            double CH4=CH4_RUN_HOURS.getValue();
            double CH5=CH5_RUN_HOURS.getValue();
            double CH6=CH6_RUN_HOURS.getValue();
            double CH7=CH7_RUN_HOURS.getValue();
          //////////////////////////////////////////////Raw Run Hours///////////////////////////
          /////////////////////////////////////////////////addition if any equal run hours//////////////////////////////////
            double[] RUN_ARRAY=new double[]{CH1,CH2,CH3,CH4,CH5,CH6,CH7};
            int k=0;
            while(k<4)
                {
                  for (int l = 0; l < 7; l++)
                      {
                      for (int n = 0; n < 7; n++)
                        {
                         if (l==n)
                            {  
                              //No ACtion
                              }
                          else
                            {
                              if (RUN_ARRAY[l]==RUN_ARRAY[n])
                                {
                                for (int m=0; m<7; m++)
                                  {
                                    RUN_ARRAY[m]=RUN_ARRAY[m]+((m+1)*0.000000001);
                                    }
                                  l=0;
                                 }
                                else
                                  {
                                  k++;
                                  }
                                }
                          }
                      } 
                   
                    }
  CH1=RUN_ARRAY[0];
  CH2=RUN_ARRAY[1];
  CH3=RUN_ARRAY[2];
  CH4=RUN_ARRAY[3];
  CH5=RUN_ARRAY[4];
  CH6=RUN_ARRAY[5];
  CH7=RUN_ARRAY[6];
  /////////////////////////////////////////////////addition if any equal run hours//////////////////////////////////
  ////////////GROUP1////////////////////////////////////////////////////////////////////////////////
  double[] SHORT_ARRAY_G1=new double[]{CH1,CH2,CH3};
  ////////////GROUP1////////////////////////////////////////////////////////////////////////////////
  Arrays.sort(SHORT_ARRAY_G1);
  ////////////GROUP2////////////////////////////////////////////////////////////////////////////////
  double[] SHORT_ARRAY_G2=new double[]{CH4,CH5,CH6,CH7};
  Arrays.sort(SHORT_ARRAY_G2);
  ////////////GROUP2////////////////////////////////////////////////////////////////////////////////
  double[] RUN_ARRAY1=new double[]{CH1,CH2,CH3,CH4,CH5,CH6,CH7};
  int[] order=new int[]{1,2,3,4,5,6,7};
  /////////////////////////////////////////GROUP1////////////////////////////////////////////////////////
  for (int i = 0; i < 3; i++)
            { 
              for (int j = 0; j < 3; j++)
                {         
                  if (SHORT_ARRAY_G1[i]==RUN_ARRAY1[j])
                  {
                    order[i]=j+1;
                    j=3;
                  }
                 }
            }
  ///////////////////////////////////////////GROUP1////////////////////////////////////////////////////////
  ///////////////////////////////////////////GROUP2///////////////////////////////////////////////////////
  for (int i = 0; i < 4; i++)
            { 
              for (int j = 0; j < 7; j++)
                {         
                  if (SHORT_ARRAY_G2[i]==RUN_ARRAY1[j])
                  {
                    order[i+3]=j+1;
                    j=7;
                  }
                 }
            }
  ///////////////////////////////////////////GROUP2////////////////////////////////////////////////////////
  //////////////////////////////////////////////**If rotation based on Run Hours**///////////////////////////    
  //*Final output
              LEAD_OUT.setValue( order[0] );
              LAG1_OUT.setValue( order[1] );
              LAG2_OUT.setValue( order[2] );
              LAG3_OUT.setValue( order[3] );
              LAG4_OUT.setValue( order[4] );
              LAG5_OUT.setValue( order[5] );
              LAG6_OUT.setValue( order[6] );
  //**Final output    
  //Dummy
  //Dummy    
          }
            
     
     
  }
  
  public void onStop() throws Exception
  {
    // shutdown code here
  }
  
}
